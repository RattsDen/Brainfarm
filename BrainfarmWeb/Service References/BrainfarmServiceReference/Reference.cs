//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BrainfarmWeb.BrainfarmServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/BrainfarmService.Data")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BrainfarmServiceReference.IBrainfarmService")]
    public interface IBrainfarmService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrainfarmService/GetTimestamp", ReplyAction="http://tempuri.org/IBrainfarmService/GetTimestampResponse")]
        string GetTimestamp();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrainfarmService/GetTimestamp", ReplyAction="http://tempuri.org/IBrainfarmService/GetTimestampResponse")]
        System.Threading.Tasks.Task<string> GetTimestampAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrainfarmService/GetAllUsers", ReplyAction="http://tempuri.org/IBrainfarmService/GetAllUsersResponse")]
        BrainfarmWeb.BrainfarmServiceReference.User[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrainfarmService/GetAllUsers", ReplyAction="http://tempuri.org/IBrainfarmService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<BrainfarmWeb.BrainfarmServiceReference.User[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrainfarmService/RegisterUser", ReplyAction="http://tempuri.org/IBrainfarmService/RegisterUserResponse")]
        bool RegisterUser(string username, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrainfarmService/RegisterUser", ReplyAction="http://tempuri.org/IBrainfarmService/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string username, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrainfarmService/Login", ReplyAction="http://tempuri.org/IBrainfarmService/LoginResponse")]
        string Login(string username, string password, bool keepLoggedIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrainfarmService/Login", ReplyAction="http://tempuri.org/IBrainfarmService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password, bool keepLoggedIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrainfarmService/GetCurrentUser", ReplyAction="http://tempuri.org/IBrainfarmService/GetCurrentUserResponse")]
        BrainfarmWeb.BrainfarmServiceReference.User GetCurrentUser(string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrainfarmService/GetCurrentUser", ReplyAction="http://tempuri.org/IBrainfarmService/GetCurrentUserResponse")]
        System.Threading.Tasks.Task<BrainfarmWeb.BrainfarmServiceReference.User> GetCurrentUserAsync(string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrainfarmService/Logout", ReplyAction="http://tempuri.org/IBrainfarmService/LogoutResponse")]
        void Logout(string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrainfarmService/Logout", ReplyAction="http://tempuri.org/IBrainfarmService/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync(string sessionToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrainfarmService/CreateProject", ReplyAction="http://tempuri.org/IBrainfarmService/CreateProjectResponse")]
        void CreateProject(string sessionToken, string title, string[] tags, string firstCommentBody);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrainfarmService/CreateProject", ReplyAction="http://tempuri.org/IBrainfarmService/CreateProjectResponse")]
        System.Threading.Tasks.Task CreateProjectAsync(string sessionToken, string title, string[] tags, string firstCommentBody);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrainfarmService/CreateComment", ReplyAction="http://tempuri.org/IBrainfarmService/CreateCommentResponse")]
        void CreateComment(string sessionToken, int projectID, int parentCommentID, string bodyText, bool isSynthesis, bool isContribution, bool isSpecification, System.Collections.Generic.Dictionary<int, string> synthesizedCommentIDs, System.Collections.Generic.Dictionary<string, byte[]> fileUploads);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrainfarmService/CreateComment", ReplyAction="http://tempuri.org/IBrainfarmService/CreateCommentResponse")]
        System.Threading.Tasks.Task CreateCommentAsync(string sessionToken, int projectID, int parentCommentID, string bodyText, bool isSynthesis, bool isContribution, bool isSpecification, System.Collections.Generic.Dictionary<int, string> synthesizedCommentIDs, System.Collections.Generic.Dictionary<string, byte[]> fileUploads);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBrainfarmServiceChannel : BrainfarmWeb.BrainfarmServiceReference.IBrainfarmService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BrainfarmServiceClient : System.ServiceModel.ClientBase<BrainfarmWeb.BrainfarmServiceReference.IBrainfarmService>, BrainfarmWeb.BrainfarmServiceReference.IBrainfarmService {
        
        public BrainfarmServiceClient() {
        }
        
        public BrainfarmServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BrainfarmServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BrainfarmServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BrainfarmServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetTimestamp() {
            return base.Channel.GetTimestamp();
        }
        
        public System.Threading.Tasks.Task<string> GetTimestampAsync() {
            return base.Channel.GetTimestampAsync();
        }
        
        public BrainfarmWeb.BrainfarmServiceReference.User[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<BrainfarmWeb.BrainfarmServiceReference.User[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public bool RegisterUser(string username, string password, string email) {
            return base.Channel.RegisterUser(username, password, email);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string username, string password, string email) {
            return base.Channel.RegisterUserAsync(username, password, email);
        }
        
        public string Login(string username, string password, bool keepLoggedIn) {
            return base.Channel.Login(username, password, keepLoggedIn);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password, bool keepLoggedIn) {
            return base.Channel.LoginAsync(username, password, keepLoggedIn);
        }
        
        public BrainfarmWeb.BrainfarmServiceReference.User GetCurrentUser(string sessionToken) {
            return base.Channel.GetCurrentUser(sessionToken);
        }
        
        public System.Threading.Tasks.Task<BrainfarmWeb.BrainfarmServiceReference.User> GetCurrentUserAsync(string sessionToken) {
            return base.Channel.GetCurrentUserAsync(sessionToken);
        }
        
        public void Logout(string sessionToken) {
            base.Channel.Logout(sessionToken);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string sessionToken) {
            return base.Channel.LogoutAsync(sessionToken);
        }
        
        public void CreateProject(string sessionToken, string title, string[] tags, string firstCommentBody) {
            base.Channel.CreateProject(sessionToken, title, tags, firstCommentBody);
        }
        
        public System.Threading.Tasks.Task CreateProjectAsync(string sessionToken, string title, string[] tags, string firstCommentBody) {
            return base.Channel.CreateProjectAsync(sessionToken, title, tags, firstCommentBody);
        }
        
        public void CreateComment(string sessionToken, int projectID, int parentCommentID, string bodyText, bool isSynthesis, bool isContribution, bool isSpecification, System.Collections.Generic.Dictionary<int, string> synthesizedCommentIDs, System.Collections.Generic.Dictionary<string, byte[]> fileUploads) {
            base.Channel.CreateComment(sessionToken, projectID, parentCommentID, bodyText, isSynthesis, isContribution, isSpecification, synthesizedCommentIDs, fileUploads);
        }
        
        public System.Threading.Tasks.Task CreateCommentAsync(string sessionToken, int projectID, int parentCommentID, string bodyText, bool isSynthesis, bool isContribution, bool isSpecification, System.Collections.Generic.Dictionary<int, string> synthesizedCommentIDs, System.Collections.Generic.Dictionary<string, byte[]> fileUploads) {
            return base.Channel.CreateCommentAsync(sessionToken, projectID, parentCommentID, bodyText, isSynthesis, isContribution, isSpecification, synthesizedCommentIDs, fileUploads);
        }
    }
}
